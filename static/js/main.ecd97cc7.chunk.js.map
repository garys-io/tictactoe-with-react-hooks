{"version":3,"sources":["GameReducer.ts","Game.jsx","index.jsx"],"names":["gameInitalState","isXNext","squares","Array","fill","gameInfo","gameReducer","state","action","type","parseInt","idx","newSquares","squaresReducer","gameInfoReducer","squareClickReducer","cloneDeep","Error","combination","s0","some","square","style","height","fontSize","Board","onSquareClick","Grid","container","direction","justify","alignItems","spacing","map","i","item","xs","key","Button","fullWidth","size","variant","color","onClick","Game","useReducer","dispatch","displayText","Container","Typography","align","varient","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ecd97cc7.chunk.js","sourcesContent":["import { cloneDeep } from \"lodash\"\n\nexport type gameInfoType = \"Ongoing\" | \"Tie\" | \"Player X won\" | \"Player O won\"\n\nexport type gameReducerActionType = \"SQUARE_CLICK\" | \"RESET_GAME\"\n\nexport interface gameReducerAction {\n  type: gameReducerActionType\n  idx?: number\n}\n\nexport interface GameInstance {\n  isXNext: boolean\n  squares: string[]\n  gameInfo: gameInfoType\n}\n\nexport const gameInitalState: GameInstance = {\n  isXNext: true,\n  squares: Array(9).fill(\"\"),\n  gameInfo: \"Ongoing\",\n}\n\nexport function gameReducer(state: GameInstance, action: gameReducerAction) {\n  switch (action.type) {\n    case \"SQUARE_CLICK\":\n      return squareClickReducer(state, action)\n    case \"RESET_GAME\":\n      return {\n        ...cloneDeep(gameInitalState),\n      }\n    default:\n      throw new Error()\n  }\n}\n\nfunction squareClickReducer(state: GameInstance, action: gameReducerAction) {\n  // check to stop overriding squares and only update squares when the game is ongoing\n  if (!state.squares[parseInt(action.idx + \"\")] && state.gameInfo === \"Ongoing\") {\n    const newSquares = squaresReducer(state, action)\n    return {\n      ...state,\n      isXNext: !state.isXNext,\n      squares: newSquares,\n      gameInfo: gameInfoReducer(newSquares),\n    }\n  }\n  return state\n}\n\nfunction squaresReducer(state: GameInstance, action: gameReducerAction) {\n  const newSquares = [...state.squares]\n  newSquares[parseInt(action.idx + \"\")] = state.isXNext ? \"X\" : \"O\"\n  return newSquares\n}\n\nfunction gameInfoReducer(squares: string[]): gameInfoType {\n  const winningCombinationsIdx = [\n    // horizontal\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    // vertical\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    // diagonal\n    [0, 4, 8],\n    [2, 4, 6],\n  ]\n\n  // check for the combinations\n  for (const combination of winningCombinationsIdx) {\n    const [s0, s1, s2] = [squares[combination[0]], squares[combination[1]], squares[combination[2]]]\n    if (!!s0 && s0 === s1 && s0 === s2) return s0 === \"X\" ? \"Player X won\" : \"Player O won\"\n  }\n\n  // if there is no more empty squares, declare tie\n  if (!squares.some((square) => square === \"\")) {\n    return \"Tie\"\n  }\n\n  // otherwise the game is ongoing\n  return \"Ongoing\"\n}\n","import React, { useReducer } from \"react\"\nimport { gameInitalState, gameReducer } from \"./GameReducer\"\nimport { Button, Container, Grid, Typography } from \"@material-ui/core\"\n\nconst style = {\n  height: \"100px\",\n  fontSize: \"50px\",\n}\n\nfunction Board({ squares, onSquareClick }) {\n  return (\n    <Grid container direction=\"row\" justify=\"space-evenly\" alignItems=\"stretch\" spacing={5}>\n      {squares.map((square, i) => (\n        <Grid item xs={4} key={i}>\n          <Button\n            fullWidth\n            style={style}\n            size=\"large\"\n            variant=\"outlined\"\n            color=\"primary\"\n            onClick={() => onSquareClick(i)}\n          >\n            {square}\n          </Button>\n        </Grid>\n      ))}\n    </Grid>\n  )\n}\n\nfunction Game() {\n  const [state, dispatch] = useReducer(gameReducer, gameInitalState)\n  const displayText =\n    state.gameInfo +\n    (state.gameInfo === \"Ongoing\" ? ` next player is ${state.isXNext ? \"X\" : \"O\"}` : \"\")\n\n  return (\n    <Container>\n      <Grid container justify=\"space-evenly\" alignItems=\"stretch\" spacing={5}>\n        <Grid item xs={12}>\n          <Typography align=\"center\" varient=\"h1\" style={style}>\n            {displayText}\n          </Typography>\n        </Grid>\n      </Grid>\n      <Board\n        squares={state.squares}\n        onSquareClick={(idx) => dispatch({ type: \"SQUARE_CLICK\", idx })}\n        isXNext={state.isXNext}\n      />\n      <Grid container justify=\"space-evenly\" alignItems=\"stretch\" spacing={5}>\n        <Grid item xs={12}>\n          <Button\n            fullWidth\n            style={style}\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={() => dispatch({ type: \"RESET_GAME\" })}\n          >\n            Reset\n          </Button>\n        </Grid>\n      </Grid>\n    </Container>\n  )\n}\n\nexport default Game\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport Game from \"./Game\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <Game />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}